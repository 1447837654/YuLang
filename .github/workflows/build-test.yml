name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  BUILD_TYPE: Debug

jobs:
  test:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-ci')"
    strategy:
      matrix:
        llvm:
        - {id: llvm-9, version: '9.0'}
        - {id: llvm-10, version: '10.0'}
        config:
        - {cc: gcc-8, cxx: g++-8}
        - {cc: gcc-9, cxx: g++-9}
        - {cc: gcc-10, cxx: g++-10}

    steps:
    - name: Install Dependencies
      run: sudo apt-get install -y libedit-dev

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v2
      with:
        path: ${{runner.temp}}/llvm
        key: ${{matrix.llvm.id}}

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{matrix.llvm.version}}
        directory: ${{runner.temp}}/llvm
        cached: ${{steps.cache-llvm.outputs.cache-hit}}

    - name: Checkout YuLang
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      working-directory: ${{runner.workspace}}/build
      shell: bash
      env:
        CC: ${{matrix.config.cc}}
        CXX: ${{matrix.config.cxx}}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: sudo make -j8 LLVM_HOME=${{runner.temp}}/llvm/bin LD=${{runner.temp}}/llvm/bin/clang AR="${{runner.temp}}/llvm/bin/llvm-ar ru" RANLIB=LD=${{runner.temp}}/llvm/bin/llvm-ranlib

    - name: Test
      working-directory: ${{runner.workspace}}/build
      run: $GITHUB_WORKSPACE/utils/run_test.sh ${{runner.workspace}}/build
